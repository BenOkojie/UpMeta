// import { PhysicsForceMode } from 'horizon/core';
// import { Component, PropTypes, Vec3, PhysicalEntity, CodeBlockEvents, Player } from 'horizon/core';

// class BouncyBlock extends Component<typeof BouncyBlock> {
//   static propsDefinition = {
//     bounceForce: { type: PropTypes.Number, default: 10 },
//   };

//   start() {
//     console.log("test");
//     this.connectCodeBlockEvent(this.entity, CodeBlockEvents.OnPlayerCollision, (player: Player, collisionAt: Vec3, normal: Vec3, relativeVelocity: Vec3) => {
//       const physicalEntity = this.entity.as(PhysicalEntity)!;
      
//       if (physicalEntity) {
//         // Apply a force upward to simulate a bounce
//         physicalEntity.applyForceAtPosition(Vec3.up.mul(this.props.bounceForce!), collisionAt, PhysicsForceMode.Impulse);
//         console.log(`BouncyBlock: Player ${player.id} collided with block at ${collisionAt.toString()} with normal ${normal.toString()}`);
//       }else{
//         console.error('BouncyBlock: No PhysicalEntity found on the entity.');
//       }
//     });
//   }
// }

// Component.register(BouncyBlock);
import * as hz from 'horizon/core';

class BounceBlock extends hz.Component<typeof BounceBlock> {
  static propsDefinition = {
    bounceForce: { type: hz.PropTypes.Number, default: 10 },
  };

  start() {
    this.connectCodeBlockEvent(this.entity, hz.CodeBlockEvents.OnPlayerCollision, (player: hz.Player, collisionAt: hz.Vec3, normal: hz.Vec3, relativeVelocity: hz.Vec3) => {
      const bounceDirection = normal.clone().normalize();
      const bounceVelocity = bounceDirection.mul(this.props.bounceForce!);
      player.velocity.set(bounceVelocity);
    });
  }
}

hz.Component.register(BounceBlock);